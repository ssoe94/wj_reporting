# Generated by Django 5.0.7 on 2025-09-16 11:07

from django.db import migrations, models

def forwards_func(apps, schema_editor):
    """
    Calculate and populate idle_time based on the logic discussed,
    before the operation_time field is removed.
    """
    InjectionReport = apps.get_model('injection', 'InjectionReport')
    db_alias = schema_editor.connection.alias

    reports_to_update = []
    # Use .iterator() to handle large datasets efficiently
    for report in InjectionReport.objects.using(db_alias).all().iterator():
        # This is the problematic case the user identified
        if report.operation_time == 0 and report.total_time > 0:
            report.idle_time = 0  # Assume idle time was 0
        else:
            # For all other records, calculate from existing data
            calculated_idle_time = report.total_time - report.operation_time
            # Ensure idle_time is not negative
            report.idle_time = max(0, calculated_idle_time)
        
        reports_to_update.append(report)

    # Update the records in bulk
    if reports_to_update:
        InjectionReport.objects.using(db_alias).bulk_update(reports_to_update, ['idle_time'])


def backwards_func(apps, schema_editor):
    """
    Re-calculate operation_time from idle_time if the migration is reversed.
    """
    InjectionReport = apps.get_model('injection', 'InjectionReport')
    db_alias = schema_editor.connection.alias

    reports_to_update = []
    for report in InjectionReport.objects.using(db_alias).all().iterator():
        report.operation_time = report.total_time - report.idle_time
        reports_to_update.append(report)

    if reports_to_update:
        InjectionReport.objects.using(db_alias).bulk_update(reports_to_update, ['operation_time'])


class Migration(migrations.Migration):

    dependencies = [
        ('injection', '0017_userprofile_is_using_temp_password_and_more'),
    ]

    operations = [
        # 1. Add the new idle_time field, making it nullable temporarily so it can be populated.
        migrations.AddField(
            model_name='injectionreport',
            name='idle_time',
            field=models.IntegerField(default=0, null=True, verbose_name='부동시간(분)'),
        ),
        # 2. Run the Python code to populate the new idle_time field from old fields.
        migrations.RunPython(forwards_func, reverse_code=backwards_func),
        # 3. Remove the old operation_time field.
        migrations.RemoveField(
            model_name='injectionreport',
            name='operation_time',
        ),
        # 4. Alter idle_time to be non-nullable as it's now fully populated.
        migrations.AlterField(
            model_name='injectionreport',
            name='idle_time',
            field=models.IntegerField(default=0, verbose_name='부동시간(분)'),
        ),
    ]